generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                String    @id @default(uuid())
  name              String
  subdomain         String    @unique
  contactEmail      String
  countryCode       String
  address           String?
  city              String?
  logoUrl           String?
  numberOfEmployees Int?
  phone             String?
  website           String?
  planId            String? // FK opcional
  plan              Plan?     @relation(fields: [planId], references: [id])
  planStatus        String    @default("pending")
  planExpiresAt     DateTime?
  termsAccepted     Boolean   @default(false)
  isActive          Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billingInvoice  BillingInvoice[]
  collectionCases CollectionCase[]
  debtors         Debtor[]
  registry        TenantRegistry?
  verdicts        Verdict[]
  users           User[]
  chatRooms       ChatRoom[]

  @@map("tenant")
}

model TenantRegistry {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  kvk       String?
  crib      String?
  taxId     String?
  vatNumber String?
  legalName String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@map("tenant_registry")
}

model User {
  id              String        @id @default(uuid())
  email           String        @db.VarChar(80)
  passwordHash    String?       @db.VarChar(120)
  fullname        String?       @db.VarChar(80)
  phone           String?       @db.VarChar(25)
  tenantId        String
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  role            roleEnum      @default(ADMIN)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  debtors         Debtor[]
  verdictBailiffs Verdict[]     @relation("UserToVerdictBailiff")
  messages        ChatMessage[]

  @@map("user")
}

model Parameter {
  id                            String   @id @default(uuid())
  porcCobranza                  Float    @default(0)
  porcAbb                       Float    @default(0)
  diasPlazoEmpresaAanmaning     Int      @default(0)
  diasPlazoConsumidorAanmaning  Int      @default(0)
  diasPlazoEmpresaSommatie      Int      @default(0)
  diasPlazoConsumidorSommatie   Int      @default(0)
  precioEmpresaPequena          Float    @default(0)
  contribucionEmpresaPequenaPfc Float    @default(0)
  precioEmpresaGrande           Float    @default(0)
  contribucionEmpresaGrandePfc  Float    @default(0)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  multaAanmaningEmpresa         Float    @default(0)
  multaAanmaningNatural         Float    @default(0)
  multaSommatieEmpresa          Float    @default(0)
  multaSommatieNatural          Float    @default(0)
  limiteDiasReaccionEmpresa     Int      @default(0)
  multaNoReaccionEmpresa        Float    @default(0)
  multaNoReaccionNatural        Float    @default(0)
  multaAcuerdoPagoEmpresa       Float    @default(0)
  multaAcuerdoPagoNatural       Float    @default(0)
  invoiceNumberLength           Int      @default(8)
  invoicePrefix                 String   @default("")
  invoiceSecuence               Int      @default(0)
  bankAccount                   String   @default("")
  bankName                      String   @default("")

  @@map("parameter")
}

model Verdict {
  id                 String                   @id @default(uuid())
  invoiceNumber      String                   @db.VarChar(100)
  creditorName       String                   @db.VarChar(100)
  debtorId           String
  registrationNumber String                   @db.VarChar(100)
  sentenceAmount     Float
  sentenceDate       DateTime
  status             VerdictStatus            @default(DRAFT)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  procesalCost       Float?                   @default(0)
  tenantId           String
  notes              String?
  bailiffId          String?
  bailiff            User?                    @relation("UserToVerdictBailiff", fields: [bailiffId], references: [id])
  debtor             Debtor                   @relation(fields: [debtorId], references: [id])
  tenant             Tenant                   @relation(fields: [tenantId], references: [id])
  attachments        VerdictAttachment[]
  bailiffServices    VerdictBailiffServices[]
  verdictEmbargo     VerdictEmbargo[]
  verdictInterest    VerdictInterest[]

  @@map("verdict")
}

model VerdictInterest {
  id                 String                   @id @default(uuid())
  interestType       Int
  baseAmount         Float
  calculatedInterest Float?
  calculationStart   DateTime
  calculationEnd     DateTime
  totalInterest      Float
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  verdictId          String?
  verdict            Verdict?                 @relation(fields: [verdictId], references: [id])
  details            VerdictInterestDetails[]

  @@map("verdict_interest")
}

model VerdictInterestDetails {
  id                String          @id @default(uuid())
  period            String
  periodStart       DateTime
  periodEnd         DateTime
  days              Int
  annualRate        Float
  proportionalRate  Float
  baseAmount        Float
  interest          Float
  total             Float
  verdictInterestId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  verdictInterest   VerdictInterest @relation(fields: [verdictInterestId], references: [id])

  @@map("verdict_interest_details")
}

model VerdictEmbargo {
  id             String   @id @default(uuid())
  verdictId      String
  companyName    String
  companyPhone   String
  companyEmail   String
  companyAddress String
  embargoType    String
  embargoDate    DateTime
  embargoAmount  Float
  totalAmount    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  verdict        Verdict  @relation(fields: [verdictId], references: [id])

  @@map("verdict_embargo")
}

model VerdictBailiffServices {
  id          String   @id @default(uuid())
  verdictId   String
  serviceType String
  serviceCost Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  verdict     Verdict  @relation(fields: [verdictId], references: [id])

  @@map("verdict_bailiff_services")
}

model VerdictAttachment {
  id        String   @id @default(uuid())
  verdictId String
  filePath  String
  fileSize  BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileName  String
  verdict   Verdict  @relation(fields: [verdictId], references: [id])

  @@map("verdict_attachment")
}

model InterestType {
  id              Int                 @id @default(autoincrement())
  name            String
  calculationType CalculationTypeEnum
  details         InterestDetail[]

  @@map("interest_type")
}

model InterestDetail {
  id             Int          @id @default(autoincrement())
  date           String
  rate           Float
  interestTypeId Int
  interestType   InterestType @relation(fields: [interestTypeId], references: [id])

  @@map("interest_detail")
}

model BillingInvoice {
  id            String                 @id @default(uuid())
  tenantId      String
  invoiceNumber String                 @unique
  amount        Float
  currency      String                 @default("USD")
  issueDate     DateTime
  dueDate       DateTime
  description   String?
  status        String                 @default("unpaid")
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  tenant        Tenant                 @relation(fields: [tenantId], references: [id])
  details       BillingInvoiceDetail[]
  payments      BillingPayment[]

  @@map("billing_invoice")
}

model BillingInvoiceDetail {
  id               String          @id @default(uuid())
  itemDescription  String
  itemQuantity     Int
  itemUnitPrice    Float
  itemTotalPrice   Float
  itemTaxRate      Float
  itemTaxAmount    Float
  itemTotalWithTax Float
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  billingInvoiceId String?
  billingInvoice   BillingInvoice? @relation(fields: [billingInvoiceId], references: [id])

  @@map("billing_invoice_detail")
}

model BillingPayment {
  id               String          @id @default(uuid())
  paymentDate      DateTime
  amount           Float
  paymentMethod    String
  transactionId    String?
  status           String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  billingInvoiceId String?
  BillingInvoice   BillingInvoice? @relation(fields: [billingInvoiceId], references: [id])

  @@map("billing_payment")
}

model Plan {
  id           String   @id @default(cuid())
  name         String   @unique // free, basic, pro
  price        Float
  description  String?
  durationDays Int // duración del plan en días
  isActive     Boolean  @default(true)
  tenants      Tenant[]

  @@map("plan")
}

model CollectionCase {
  id              String             @id @default(cuid())
  referenceNumber String?
  issueDate       DateTime?
  dueDate         DateTime?
  tenantId        String
  debtorId        String
  amountOriginal  Decimal            @db.Decimal(10, 2)
  amountDue       Decimal            @db.Decimal(10, 2)
  amountToReceive Decimal            @db.Decimal(10, 2)
  status          CollectionStatus   @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  debtor          Debtor             @relation(fields: [debtorId], references: [id])
  tenant          Tenant             @relation(fields: [tenantId], references: [id])
  notifications   Notification[]
  payments        Payment[]
  agreements      PaymentAgreement[]
  penalties       Penalty[]
  chatRooms       ChatRoom[]

  @@map("collection_case")
}

model Penalty {
  id               String         @id @default(cuid())
  collectionCaseId String
  description      String?
  amount           Decimal        @db.Decimal(10, 2)
  dateApplied      DateTime       @default(now())
  isPaid           Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  collectionCase   CollectionCase @relation(fields: [collectionCaseId], references: [id])

  @@map("penalty")
}

model Notification {
  id               String           @id @default(cuid())
  collectionCaseId String
  type             NotificationType
  title            String
  message          String
  sentAt           DateTime         @default(now())
  read             Boolean          @default(false)
  createdAt        DateTime         @default(now())
  collectionCase   CollectionCase   @relation(fields: [collectionCaseId], references: [id])

  @@map("notification")
}

model Payment {
  id                 String            @id @default(cuid())
  amount             Decimal           @db.Decimal(10, 2)
  method             PaymentMethod
  createdAt          DateTime          @default(now())
  collectionCaseId   String
  paymentDate        DateTime
  referenceNumber    String?
  updatedAt          DateTime          @updatedAt
  collectionCase     CollectionCase    @relation(fields: [collectionCaseId], references: [id])
  PaymentAgreement   PaymentAgreement? @relation(fields: [paymentAgreementId], references: [id])
  paymentAgreementId String?
  Installment        Installment[]

  @@map("payment")
}

model Debtor {
  id                 String              @id @default(uuid())
  tenantId           String
  userId             String?
  fullname           String
  email              String
  phone              String?
  address            String?
  personType         String?
  identificationType IdentificationType?
  identification     String?
  totalIncome        Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  collectionCases    CollectionCase[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  user               User?               @relation(fields: [userId], references: [id])
  incomes            DebtorIncome[]
  paymentAgreements  PaymentAgreement[]
  verdicts           Verdict[]

  @@unique([tenantId, email])
  @@unique([tenantId, identification])
  @@map("debtor")
}

model ChatRoom {
  id               String         @id @default(cuid())
  tenantId         String
  tenant           Tenant         @relation(fields: [tenantId], references: [id])
  collectionCaseId String
  collectionCase   CollectionCase @relation(fields: [collectionCaseId], references: [id])
  name             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  messages         ChatMessage[]

  @@map("chat_room")
}

model ChatMessage {
  id     String   @id @default(cuid())
  roomId String
  room   ChatRoom @relation(fields: [roomId], references: [id])

  senderId String
  sender   User    @relation(fields: [senderId], references: [id])
  message  String
  fileUrl  String?
  fileName String?

  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_message")
}

model DebtorIncome {
  id        String   @id @default(uuid())
  debtorId  String
  amount    Float
  source    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  debtor    Debtor   @relation(fields: [debtorId], references: [id])

  @@map("debtor_incomes")
}

model PaymentAgreement {
  id                String           @id @default(cuid())
  collectionCaseId  String           @unique
  totalAmount       Decimal          @db.Decimal(10, 2)
  installmentAmount Decimal          @db.Decimal(10, 2)
  installmentsCount Int
  startDate         DateTime
  status            AgreementStatus  @default(ACTIVE)
  complianceStatus  ComplianceStatus @default(ON_TIME)

  // Relaciones
  collectionCase CollectionCase @relation(fields: [collectionCaseId], references: [id])
  installments   Installment[]
  payments       Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Debtor    Debtor?  @relation(fields: [debtorId], references: [id])
  debtorId  String?

  @@map("payment_agreement")
}

model Installment {
  id                 String            @id @default(cuid())
  paymentAgreementId String
  number             Int
  dueDate            DateTime
  amount             Decimal           @db.Decimal(10, 2)
  status             InstallmentStatus @default(PENDING)
  paymentId          String? // si se pagó, relaciona con Payment

  // Relaciones
  paymentAgreement PaymentAgreement @relation(fields: [paymentAgreementId], references: [id])
  payment          Payment?         @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("installment")
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum ComplianceStatus {
  ON_TIME // al día
  OVERDUE // en mora
}

enum CalculationTypeEnum {
  FIXED
  VARIABLE
}

enum VerdictStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  AANMANING
  SOMMATIE
  INGEBREKESTELLING
  BLOKKADE
}

enum IdentificationType {
  DNI
  PASSPORT
  NIE
  CIF
  KVK
  OTHER
}

enum roleEnum {
  SUPERADMIN
  ADMIN
  DEBTOR
  BAILIFF
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT_CARD
  CHECK
  OTHER
}

enum AgreementStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum CollectionStatus {
  PENDING
  IN_PROGRESS
  PAID
  OVERDUE
  CANCELLED
}
