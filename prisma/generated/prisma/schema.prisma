generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                  String  @id @default(uuid())
  name                String
  subdomain           String  @unique
  contact_email       String
  country_code        String
  kvk                 String?
  legal_name          String?
  address             String?
  city                String?
  logo_url            String?
  number_of_employees Int?
  phone               String?
  website             String?
  terms_accepted      Boolean @default(false)
  is_active           Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  billing_invoice  BillingInvoice[]
  collection_cases CollectionCase[]
  debtors          Debtor[]
  verdicts         Verdict[]
  users            User[]
  chat_rooms       ChatRoom[]
  agreements       CollectionCaseAgreement[]

  @@map("tenant")
}

model User {
  id               String        @id @default(uuid())
  email            String        @db.VarChar(80)
  password_hash    String?       @db.VarChar(120)
  fullname         String?       @db.VarChar(80)
  phone            String?       @db.VarChar(25)
  tenant_id        String
  tenant           Tenant        @relation(fields: [tenant_id], references: [id])
  role             roleEnum      @default(TENANT_ADMIN)
  is_active        Boolean       @default(true)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  debtors          Debtor[]
  verdict_bailiffs Verdict[]     @relation("UserToVerdictBailiff")
  messages         ChatMessage[]

  @@map("user")
}

model Parameter {
  id String @id @default(uuid())

  collection_fee_rate Float @default(0)
  abb_rate            Float @default(0)

  company_aanmaning_term_days  Int @default(0)
  consumer_aanmaning_term_days Int @default(0)
  company_sommatie_term_days   Int @default(0)
  consumer_sommatie_term_days  Int @default(0)

  small_company_price            Float @default(0)
  small_company_pfc_contribution Float @default(0)
  large_company_price            Float @default(0)
  large_company_pfc_contribution Float @default(0)

  company_aanmaning_penalty Float @default(0)
  natural_aanmaning_penalty Float @default(0)
  company_sommatie_penalty  Float @default(0)
  natural_sommatie_penalty  Float @default(0)

  company_reaction_limit_days Int   @default(0)
  company_no_reaction_penalty Float @default(0)
  natural_no_reaction_penalty Float @default(0)

  company_payment_agreement_fee Float @default(0)
  natural_payment_agreement_fee Float @default(0)

  invoice_number_length Int    @default(8)
  invoice_prefix        String @default("")
  invoice_sequence      Int    @default(0)

  bank_account String @default("")
  bank_name    String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("parameter")
}

model Verdict {
  id                  String                   @id @default(uuid())
  invoice_number      String                   @db.VarChar(100)
  creditor_name       String                   @db.VarChar(100)
  debtor_id           String
  registration_number String                   @db.VarChar(100)
  sentence_amount     Float
  sentence_date       DateTime
  status              VerdictStatus            @default(DRAFT)
  created_at          DateTime                 @default(now())
  updated_at          DateTime                 @updatedAt
  procesal_cost       Float?                   @default(0)
  tenant_id           String
  notes               String?
  bailiff_id          String?
  bailiff             User?                    @relation("UserToVerdictBailiff", fields: [bailiff_id], references: [id])
  debtor              Debtor                   @relation(fields: [debtor_id], references: [id])
  tenant              Tenant                   @relation(fields: [tenant_id], references: [id])
  attachments         VerdictAttachment[]
  bailiff_services    VerdictBailiffServices[]
  verdict_embargo     VerdictEmbargo[]
  verdict_interest    VerdictInterest[]

  @@map("verdict")
}

model VerdictInterest {
  id                  String                   @id @default(uuid())
  interest_type       Int
  base_amount         Float
  calculated_interest Float?
  calculation_start   DateTime
  calculation_end     DateTime
  total_interest      Float
  created_at          DateTime                 @default(now())
  updated_at          DateTime                 @updatedAt
  verdict_id          String?
  verdict             Verdict?                 @relation(fields: [verdict_id], references: [id])
  details             VerdictInterestDetails[]

  @@map("verdict_interest")
}

model VerdictInterestDetails {
  id                  String          @id @default(uuid())
  period              String
  period_start        DateTime
  period_end          DateTime
  days                Int
  annual_rate         Float
  proportional_rate   Float
  base_amount         Float
  interest            Float
  total               Float
  verdict_interest_id String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  verdict_interest    VerdictInterest @relation(fields: [verdict_interest_id], references: [id])

  @@map("verdict_interest_details")
}

model VerdictEmbargo {
  id              String   @id @default(uuid())
  verdict_id      String
  company_name    String
  company_phone   String
  company_email   String
  company_address String
  embargo_type    String
  embargo_date    DateTime
  embargo_amount  Float
  total_amount    Float
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  verdict         Verdict  @relation(fields: [verdict_id], references: [id])

  @@map("verdict_embargo")
}

model VerdictBailiffServices {
  id           String   @id @default(uuid())
  verdict_id   String
  service_type String
  service_cost Float
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  verdict      Verdict  @relation(fields: [verdict_id], references: [id])

  @@map("verdict_bailiff_services")
}

model VerdictAttachment {
  id         String   @id @default(uuid())
  verdict_id String
  file_path  String
  file_size  BigInt
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  file_name  String
  verdict    Verdict  @relation(fields: [verdict_id], references: [id])

  @@map("verdict_attachment")
}

model InterestType {
  id               Int                 @id @default(autoincrement())
  name             String
  calculation_type CalculationTypeEnum
  details          InterestDetail[]

  @@map("interest_type")
}

model InterestDetail {
  id               Int          @id @default(autoincrement())
  date             String
  rate             Float
  interest_type_id Int
  interest_type    InterestType @relation(fields: [interest_type_id], references: [id])

  @@map("interest_detail")
}

model BillingInvoice {
  id             String                 @id @default(uuid())
  tenant_id      String
  invoice_number String                 @unique
  amount         Float
  currency       String                 @default("USD")
  issue_date     DateTime
  due_date       DateTime
  description    String?
  status         String                 @default("unpaid")
  created_at     DateTime               @default(now())
  updated_at     DateTime               @updatedAt
  tenant         Tenant                 @relation(fields: [tenant_id], references: [id])
  details        BillingInvoiceDetail[]
  payments       BillingPayment[]

  @@map("billing_invoice")
}

model BillingInvoiceDetail {
  id                  String          @id @default(uuid())
  item_description    String
  item_quantity       Int
  item_unit_price     Float
  item_total_price    Float
  item_tax_rate       Float
  item_tax_amount     Float
  item_total_with_tax Float
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  billing_invoice_id  String?
  billing_invoice     BillingInvoice? @relation(fields: [billing_invoice_id], references: [id])

  @@map("billing_invoice_detail")
}

model BillingPayment {
  id                 String          @id @default(uuid())
  payment_date       DateTime
  amount             Float
  payment_method     String
  transaction_id     String?
  status             String
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  billing_invoice_id String?
  billing_invoice    BillingInvoice? @relation(fields: [billing_invoice_id], references: [id])

  @@map("billing_payment")
}

model CollectionCase {
  id                  String                       @id @default(cuid())
  reference_number    String?
  issue_date          DateTime
  due_date            DateTime // fecha de vencimiento original
  tenant_id           String
  debtor_id           String
  amount_original     Decimal                      @db.Decimal(10, 2)
  amount_due          Decimal                      @db.Decimal(10, 2)
  amount_to_receive   Decimal                      @db.Decimal(10, 2)
  status              CollectionCaseStatus         @default(AANMANING)
  notification_status String?
  created_at          DateTime                     @default(now())
  updated_at          DateTime                     @updatedAt
  debtor              Debtor                       @relation(fields: [debtor_id], references: [id])
  tenant              Tenant                       @relation(fields: [tenant_id], references: [id])
  notifications       CollectionCaseNotification[]
  payments            CollectionCasePayment[]
  agreements          CollectionCaseAgreement[]
  penalties           CollectionCasePenalty[]
  chat_rooms          ChatRoom[]

  @@map("collection_case")
}

model CollectionCasePenalty {
  id                 String         @id @default(cuid())
  collection_case_id String
  description        String?
  amount             Decimal        @db.Decimal(10, 2)
  date_applied       DateTime       @default(now())
  is_paid            Boolean        @default(false)
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  collection_case    CollectionCase @relation(fields: [collection_case_id], references: [id])

  @@map("collection_case_penalty")
}

model CollectionCaseNotification {
  id                 String           @id @default(cuid())
  collection_case_id String
  type               NotificationType
  title              String
  message            String
  sent_at            DateTime         @default(now())
  read               Boolean          @default(false)
  created_at         DateTime         @default(now())
  collection_case    CollectionCase   @relation(fields: [collection_case_id], references: [id])

  @@map("collection_case_notification")
}

model CollectionCasePayment {
  id                 String                               @id @default(cuid())
  method             PaymentMethod
  amount             Decimal                              @db.Decimal(10, 2)
  collection_case_id String
  payment_date       DateTime
  reference_number   String?
  agreement_id       String?
  created_at         DateTime                             @default(now())
  updated_at         DateTime                             @updatedAt
  collection_case    CollectionCase                       @relation(fields: [collection_case_id], references: [id])
  agreement          CollectionCaseAgreement?             @relation(fields: [agreement_id], references: [id])
  installments       CollectionCaseAgreementInstallment[]

  @@map("collection_case_payment")
}

model Debtor {
  id                  String                    @id @default(uuid())
  tenant_id           String
  user_id             String?
  fullname            String
  email               String
  phone               String?
  address             String?
  person_type         PersonType                @default(INDIVIDUAL)
  identification_type IdentificationType?
  identification      String?
  total_income        Float?
  created_at          DateTime                  @default(now())
  updated_at          DateTime                  @updatedAt
  collection_cases    CollectionCase[]
  tenant              Tenant                    @relation(fields: [tenant_id], references: [id])
  user                User?                     @relation(fields: [user_id], references: [id])
  incomes             DebtorIncome[]
  payment_agreements  CollectionCaseAgreement[]
  verdicts            Verdict[]

  @@unique([tenant_id, email])
  @@unique([tenant_id, identification])
  @@map("debtor")
}

model ChatRoom {
  id                 String         @id @default(cuid())
  tenant_id          String
  tenant             Tenant         @relation(fields: [tenant_id], references: [id])
  collection_case_id String
  collection_case    CollectionCase @relation(fields: [collection_case_id], references: [id])
  name               String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  messages           ChatMessage[]

  @@map("chat_room")
}

model ChatMessage {
  id      String   @id @default(cuid())
  room_id String
  room    ChatRoom @relation(fields: [room_id], references: [id])

  sender_id String
  sender    User    @relation(fields: [sender_id], references: [id])
  message   String
  file_url  String?
  file_name String?

  timestamp  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("chat_message")
}

model DebtorIncome {
  id         String   @id @default(uuid())
  debtor_id  String
  amount     Float
  source     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  debtor     Debtor   @relation(fields: [debtor_id], references: [id])

  @@map("debtor_incomes")
}

model CollectionCaseAgreement {
  id                 String          @id @default(cuid())
  collection_case_id String
  debtor_id          String?
  total_amount       Decimal         @db.Decimal(10, 2)
  installment_amount Decimal         @db.Decimal(10, 2)
  installments_count Int
  start_date         DateTime
  end_date           DateTime
  status             AgreementStatus @default(PENDING)
  tenant_id          String
  tenant             Tenant          @relation(fields: [tenant_id], references: [id])
  comment            String?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt

  // Relaciones
  debtor          Debtor?                              @relation(fields: [debtor_id], references: [id])
  collection_case CollectionCase                       @relation(fields: [collection_case_id], references: [id])
  installments    CollectionCaseAgreementInstallment[]
  payments        CollectionCasePayment[]

  @@map("collection_case_agreement")
}

model CollectionCaseAgreementInstallment {
  id           String            @id @default(cuid())
  agreement_id String
  number       Int
  due_date     DateTime
  amount       Decimal           @db.Decimal(10, 2)
  status       InstallmentStatus @default(PENDING)
  payment_id   String? // si se pagó, relaciona con CollectionCasePayment
  created_at   DateTime          @default(now())
  updated_at   DateTime          @updatedAt

  // Relaciones
  agreement CollectionCaseAgreement @relation(fields: [agreement_id], references: [id])
  payment   CollectionCasePayment?  @relation(fields: [payment_id], references: [id])

  @@map("collection_case_agreement_installment")
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum AgreementStatus {
  PENDING
  IN_NEGOTIATION
  COUNTEROFFER
  ACCEPTED
  REJECTED
  CANCELLED
  CLOSED
}

enum CalculationTypeEnum {
  FIXED
  VARIABLE
}

enum VerdictStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  AANMANING
  SOMMATIE
  INGEBREKESTELLING
  BLOKKADE
}

enum IdentificationType {
  DNI
  PASSPORT
  NIE
  CIF
  KVK
  OTHER
}

enum roleEnum {
  PLATFORM_OWNER
  TENANT_ADMIN
  AGENT
  DEBTOR
  BAILIFF
}

enum PaymentMethod {
  TRANSFER
  CREDIT_CARD
}

enum CollectionCaseStatus {
  AANMANING
  SOMMATIE
  INGEBREKESTELLING
  BLOKKADE
}

enum PersonType {
  INDIVIDUAL
  COMPANY
}
