
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  contact_email: 'contact_email',
  country_code: 'country_code',
  kvk: 'kvk',
  legal_name: 'legal_name',
  address: 'address',
  city: 'city',
  logo_url: 'logo_url',
  number_of_employees: 'number_of_employees',
  phone: 'phone',
  website: 'website',
  terms_accepted: 'terms_accepted',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  fullname: 'fullname',
  phone: 'phone',
  tenant_id: 'tenant_id',
  role: 'role',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ParameterScalarFieldEnum = {
  id: 'id',
  collection_fee_rate: 'collection_fee_rate',
  abb_rate: 'abb_rate',
  company_aanmaning_term_days: 'company_aanmaning_term_days',
  consumer_aanmaning_term_days: 'consumer_aanmaning_term_days',
  company_sommatie_term_days: 'company_sommatie_term_days',
  consumer_sommatie_term_days: 'consumer_sommatie_term_days',
  small_company_price: 'small_company_price',
  small_company_pfc_contribution: 'small_company_pfc_contribution',
  large_company_price: 'large_company_price',
  large_company_pfc_contribution: 'large_company_pfc_contribution',
  company_aanmaning_penalty: 'company_aanmaning_penalty',
  natural_aanmaning_penalty: 'natural_aanmaning_penalty',
  company_sommatie_penalty: 'company_sommatie_penalty',
  natural_sommatie_penalty: 'natural_sommatie_penalty',
  company_reaction_limit_days: 'company_reaction_limit_days',
  company_no_reaction_penalty: 'company_no_reaction_penalty',
  natural_no_reaction_penalty: 'natural_no_reaction_penalty',
  company_payment_agreement_fee: 'company_payment_agreement_fee',
  natural_payment_agreement_fee: 'natural_payment_agreement_fee',
  invoice_number_length: 'invoice_number_length',
  invoice_prefix: 'invoice_prefix',
  invoice_sequence: 'invoice_sequence',
  bank_account: 'bank_account',
  bank_name: 'bank_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VerdictScalarFieldEnum = {
  id: 'id',
  invoice_number: 'invoice_number',
  creditor_name: 'creditor_name',
  debtor_id: 'debtor_id',
  registration_number: 'registration_number',
  sentence_amount: 'sentence_amount',
  sentence_date: 'sentence_date',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  procesal_cost: 'procesal_cost',
  tenant_id: 'tenant_id',
  notes: 'notes',
  bailiff_id: 'bailiff_id'
};

exports.Prisma.VerdictInterestScalarFieldEnum = {
  id: 'id',
  interest_type: 'interest_type',
  base_amount: 'base_amount',
  calculated_interest: 'calculated_interest',
  calculation_start: 'calculation_start',
  calculation_end: 'calculation_end',
  total_interest: 'total_interest',
  created_at: 'created_at',
  updated_at: 'updated_at',
  verdict_id: 'verdict_id'
};

exports.Prisma.VerdictInterestDetailsScalarFieldEnum = {
  id: 'id',
  period: 'period',
  period_start: 'period_start',
  period_end: 'period_end',
  days: 'days',
  annual_rate: 'annual_rate',
  proportional_rate: 'proportional_rate',
  base_amount: 'base_amount',
  interest: 'interest',
  total: 'total',
  verdict_interest_id: 'verdict_interest_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VerdictEmbargoScalarFieldEnum = {
  id: 'id',
  verdict_id: 'verdict_id',
  company_name: 'company_name',
  company_phone: 'company_phone',
  company_email: 'company_email',
  company_address: 'company_address',
  embargo_type: 'embargo_type',
  embargo_date: 'embargo_date',
  embargo_amount: 'embargo_amount',
  total_amount: 'total_amount',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VerdictBailiffServicesScalarFieldEnum = {
  id: 'id',
  verdict_id: 'verdict_id',
  service_type: 'service_type',
  service_cost: 'service_cost',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.VerdictAttachmentScalarFieldEnum = {
  id: 'id',
  verdict_id: 'verdict_id',
  file_path: 'file_path',
  file_size: 'file_size',
  created_at: 'created_at',
  updated_at: 'updated_at',
  file_name: 'file_name'
};

exports.Prisma.InterestTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  calculation_type: 'calculation_type'
};

exports.Prisma.InterestDetailScalarFieldEnum = {
  id: 'id',
  date: 'date',
  rate: 'rate',
  interest_type_id: 'interest_type_id'
};

exports.Prisma.BillingInvoiceScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  invoice_number: 'invoice_number',
  amount: 'amount',
  currency: 'currency',
  issue_date: 'issue_date',
  due_date: 'due_date',
  description: 'description',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BillingInvoiceDetailScalarFieldEnum = {
  id: 'id',
  item_description: 'item_description',
  item_quantity: 'item_quantity',
  item_unit_price: 'item_unit_price',
  item_total_price: 'item_total_price',
  item_tax_rate: 'item_tax_rate',
  item_tax_amount: 'item_tax_amount',
  item_total_with_tax: 'item_total_with_tax',
  created_at: 'created_at',
  updated_at: 'updated_at',
  billing_invoice_id: 'billing_invoice_id'
};

exports.Prisma.BillingPaymentScalarFieldEnum = {
  id: 'id',
  payment_date: 'payment_date',
  amount: 'amount',
  payment_method: 'payment_method',
  transaction_id: 'transaction_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  billing_invoice_id: 'billing_invoice_id'
};

exports.Prisma.CollectionCaseScalarFieldEnum = {
  id: 'id',
  reference_number: 'reference_number',
  issue_date: 'issue_date',
  due_date: 'due_date',
  reminder1_sent_at: 'reminder1_sent_at',
  reminder1_due_date: 'reminder1_due_date',
  reminder2_sent_at: 'reminder2_sent_at',
  reminder2_due_date: 'reminder2_due_date',
  tenant_id: 'tenant_id',
  debtor_id: 'debtor_id',
  amount_original: 'amount_original',
  amount_due: 'amount_due',
  amount_to_receive: 'amount_to_receive',
  status: 'status',
  notification_status: 'notification_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CollectionCasePenaltyScalarFieldEnum = {
  id: 'id',
  collection_case_id: 'collection_case_id',
  description: 'description',
  amount: 'amount',
  date_applied: 'date_applied',
  is_paid: 'is_paid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CollectionCaseNotificationScalarFieldEnum = {
  id: 'id',
  collection_case_id: 'collection_case_id',
  type: 'type',
  title: 'title',
  message: 'message',
  sent_at: 'sent_at',
  read: 'read',
  created_at: 'created_at'
};

exports.Prisma.CollectionCasePaymentScalarFieldEnum = {
  id: 'id',
  method: 'method',
  amount: 'amount',
  collection_case_id: 'collection_case_id',
  payment_date: 'payment_date',
  reference_number: 'reference_number',
  agreement_id: 'agreement_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DebtorScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  user_id: 'user_id',
  fullname: 'fullname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  person_type: 'person_type',
  identification_type: 'identification_type',
  identification: 'identification',
  total_income: 'total_income',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  tenant_id: 'tenant_id',
  collection_case_id: 'collection_case_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  room_id: 'room_id',
  sender_id: 'sender_id',
  message: 'message',
  file_url: 'file_url',
  file_name: 'file_name',
  timestamp: 'timestamp',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DebtorIncomeScalarFieldEnum = {
  id: 'id',
  debtor_id: 'debtor_id',
  amount: 'amount',
  source: 'source',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CollectionCaseAgreementScalarFieldEnum = {
  id: 'id',
  collection_case_id: 'collection_case_id',
  debtor_id: 'debtor_id',
  total_amount: 'total_amount',
  installment_amount: 'installment_amount',
  installments_count: 'installments_count',
  start_date: 'start_date',
  end_date: 'end_date',
  status: 'status',
  tenant_id: 'tenant_id',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CollectionCaseAgreementInstallmentScalarFieldEnum = {
  id: 'id',
  agreement_id: 'agreement_id',
  number: 'number',
  due_date: 'due_date',
  amount: 'amount',
  status: 'status',
  payment_id: 'payment_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.roleEnum = exports.$Enums.roleEnum = {
  PLATFORM_OWNER: 'PLATFORM_OWNER',
  TENANT_ADMIN: 'TENANT_ADMIN',
  AGENT: 'AGENT',
  DEBTOR: 'DEBTOR',
  BAILIFF: 'BAILIFF'
};

exports.VerdictStatus = exports.$Enums.VerdictStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.CalculationTypeEnum = exports.$Enums.CalculationTypeEnum = {
  FIXED: 'FIXED',
  VARIABLE: 'VARIABLE'
};

exports.CollectionCaseStatus = exports.$Enums.CollectionCaseStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  AANMANING: 'AANMANING',
  SOMMATIE: 'SOMMATIE',
  INGEBREKESTELLING: 'INGEBREKESTELLING',
  BLOKKADE: 'BLOKKADE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  TRANSFER: 'TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD'
};

exports.PersonType = exports.$Enums.PersonType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY'
};

exports.IdentificationType = exports.$Enums.IdentificationType = {
  DNI: 'DNI',
  PASSPORT: 'PASSPORT',
  NIE: 'NIE',
  CIF: 'CIF',
  KVK: 'KVK',
  OTHER: 'OTHER'
};

exports.AgreementStatus = exports.$Enums.AgreementStatus = {
  PENDING: 'PENDING',
  IN_NEGOTIATION: 'IN_NEGOTIATION',
  COUNTEROFFER: 'COUNTEROFFER',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  CLOSED: 'CLOSED'
};

exports.InstallmentStatus = exports.$Enums.InstallmentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  Parameter: 'Parameter',
  Verdict: 'Verdict',
  VerdictInterest: 'VerdictInterest',
  VerdictInterestDetails: 'VerdictInterestDetails',
  VerdictEmbargo: 'VerdictEmbargo',
  VerdictBailiffServices: 'VerdictBailiffServices',
  VerdictAttachment: 'VerdictAttachment',
  InterestType: 'InterestType',
  InterestDetail: 'InterestDetail',
  BillingInvoice: 'BillingInvoice',
  BillingInvoiceDetail: 'BillingInvoiceDetail',
  BillingPayment: 'BillingPayment',
  CollectionCase: 'CollectionCase',
  CollectionCasePenalty: 'CollectionCasePenalty',
  CollectionCaseNotification: 'CollectionCaseNotification',
  CollectionCasePayment: 'CollectionCasePayment',
  Debtor: 'Debtor',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  DebtorIncome: 'DebtorIncome',
  CollectionCaseAgreement: 'CollectionCaseAgreement',
  CollectionCaseAgreementInstallment: 'CollectionCaseAgreementInstallment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
