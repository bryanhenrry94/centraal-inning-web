
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  contactEmail: 'contactEmail',
  countryCode: 'countryCode',
  address: 'address',
  city: 'city',
  logoUrl: 'logoUrl',
  numberOfEmployees: 'numberOfEmployees',
  phone: 'phone',
  website: 'website',
  planId: 'planId',
  planStatus: 'planStatus',
  planExpiresAt: 'planExpiresAt',
  termsAccepted: 'termsAccepted',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TenantRegistryScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  kvk: 'kvk',
  crib: 'crib',
  taxId: 'taxId',
  vatNumber: 'vatNumber',
  legalName: 'legalName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  fullname: 'fullname',
  phone: 'phone',
  tenantId: 'tenantId',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParameterScalarFieldEnum = {
  id: 'id',
  porcCobranza: 'porcCobranza',
  porcAbb: 'porcAbb',
  diasPlazoEmpresaAanmaning: 'diasPlazoEmpresaAanmaning',
  diasPlazoConsumidorAanmaning: 'diasPlazoConsumidorAanmaning',
  diasPlazoEmpresaSommatie: 'diasPlazoEmpresaSommatie',
  diasPlazoConsumidorSommatie: 'diasPlazoConsumidorSommatie',
  precioEmpresaPequena: 'precioEmpresaPequena',
  contribucionEmpresaPequenaPfc: 'contribucionEmpresaPequenaPfc',
  precioEmpresaGrande: 'precioEmpresaGrande',
  contribucionEmpresaGrandePfc: 'contribucionEmpresaGrandePfc',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  multaAanmaningEmpresa: 'multaAanmaningEmpresa',
  multaAanmaningNatural: 'multaAanmaningNatural',
  multaSommatieEmpresa: 'multaSommatieEmpresa',
  multaSommatieNatural: 'multaSommatieNatural',
  limiteDiasReaccionEmpresa: 'limiteDiasReaccionEmpresa',
  multaNoReaccionEmpresa: 'multaNoReaccionEmpresa',
  multaNoReaccionNatural: 'multaNoReaccionNatural',
  multaAcuerdoPagoEmpresa: 'multaAcuerdoPagoEmpresa',
  multaAcuerdoPagoNatural: 'multaAcuerdoPagoNatural',
  invoiceNumberLength: 'invoiceNumberLength',
  invoicePrefix: 'invoicePrefix',
  invoiceSecuence: 'invoiceSecuence',
  bankAccount: 'bankAccount',
  bankName: 'bankName'
};

exports.Prisma.VerdictScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  creditorName: 'creditorName',
  debtorId: 'debtorId',
  registrationNumber: 'registrationNumber',
  sentenceAmount: 'sentenceAmount',
  sentenceDate: 'sentenceDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  procesalCost: 'procesalCost',
  tenantId: 'tenantId',
  notes: 'notes',
  bailiffId: 'bailiffId'
};

exports.Prisma.VerdictInterestScalarFieldEnum = {
  id: 'id',
  interestType: 'interestType',
  baseAmount: 'baseAmount',
  calculatedInterest: 'calculatedInterest',
  calculationStart: 'calculationStart',
  calculationEnd: 'calculationEnd',
  totalInterest: 'totalInterest',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  verdictId: 'verdictId'
};

exports.Prisma.VerdictInterestDetailsScalarFieldEnum = {
  id: 'id',
  period: 'period',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  days: 'days',
  annualRate: 'annualRate',
  proportionalRate: 'proportionalRate',
  baseAmount: 'baseAmount',
  interest: 'interest',
  total: 'total',
  verdictInterestId: 'verdictInterestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerdictEmbargoScalarFieldEnum = {
  id: 'id',
  verdictId: 'verdictId',
  companyName: 'companyName',
  companyPhone: 'companyPhone',
  companyEmail: 'companyEmail',
  companyAddress: 'companyAddress',
  embargoType: 'embargoType',
  embargoDate: 'embargoDate',
  embargoAmount: 'embargoAmount',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerdictBailiffServicesScalarFieldEnum = {
  id: 'id',
  verdictId: 'verdictId',
  serviceType: 'serviceType',
  serviceCost: 'serviceCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerdictAttachmentScalarFieldEnum = {
  id: 'id',
  verdictId: 'verdictId',
  filePath: 'filePath',
  fileSize: 'fileSize',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fileName: 'fileName'
};

exports.Prisma.InterestTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  calculationType: 'calculationType'
};

exports.Prisma.InterestDetailScalarFieldEnum = {
  id: 'id',
  date: 'date',
  rate: 'rate',
  interestTypeId: 'interestTypeId'
};

exports.Prisma.BillingInvoiceScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  invoiceNumber: 'invoiceNumber',
  amount: 'amount',
  currency: 'currency',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingInvoiceDetailScalarFieldEnum = {
  id: 'id',
  itemDescription: 'itemDescription',
  itemQuantity: 'itemQuantity',
  itemUnitPrice: 'itemUnitPrice',
  itemTotalPrice: 'itemTotalPrice',
  itemTaxRate: 'itemTaxRate',
  itemTaxAmount: 'itemTaxAmount',
  itemTotalWithTax: 'itemTotalWithTax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billingInvoiceId: 'billingInvoiceId'
};

exports.Prisma.BillingPaymentScalarFieldEnum = {
  id: 'id',
  paymentDate: 'paymentDate',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billingInvoiceId: 'billingInvoiceId'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  description: 'description',
  durationDays: 'durationDays',
  isActive: 'isActive'
};

exports.Prisma.CollectionCaseScalarFieldEnum = {
  id: 'id',
  referenceNumber: 'referenceNumber',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  tenantId: 'tenantId',
  debtorId: 'debtorId',
  amountOriginal: 'amountOriginal',
  amountDue: 'amountDue',
  amountToReceive: 'amountToReceive',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PenaltyScalarFieldEnum = {
  id: 'id',
  collectionCaseId: 'collectionCaseId',
  description: 'description',
  amount: 'amount',
  dateApplied: 'dateApplied',
  isPaid: 'isPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  collectionCaseId: 'collectionCaseId',
  type: 'type',
  title: 'title',
  message: 'message',
  sentAt: 'sentAt',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  method: 'method',
  createdAt: 'createdAt',
  collectionCaseId: 'collectionCaseId',
  paymentDate: 'paymentDate',
  referenceNumber: 'referenceNumber',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentAgreementScalarFieldEnum = {
  id: 'id',
  debtorId: 'debtorId',
  agreementDate: 'agreementDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  collectionCaseId: 'collectionCaseId',
  installmentAmount: 'installmentAmount',
  nextPaymentDate: 'nextPaymentDate',
  notes: 'notes',
  totalInstallments: 'totalInstallments'
};

exports.Prisma.DebtorScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  fullname: 'fullname',
  email: 'email',
  phone: 'phone',
  address: 'address',
  personType: 'personType',
  identificationType: 'identificationType',
  identification: 'identification',
  totalIncome: 'totalIncome',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DebtorIncomeScalarFieldEnum = {
  id: 'id',
  debtorId: 'debtorId',
  amount: 'amount',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.roleEnum = exports.$Enums.roleEnum = {
  SUPERADMIN: 'SUPERADMIN',
  ADMIN: 'ADMIN',
  DEBTOR: 'DEBTOR',
  BAILIFF: 'BAILIFF'
};

exports.VerdictStatus = exports.$Enums.VerdictStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.CalculationTypeEnum = exports.$Enums.CalculationTypeEnum = {
  FIXED: 'FIXED',
  VARIABLE: 'VARIABLE'
};

exports.CollectionStatus = exports.$Enums.CollectionStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  AANMANING: 'AANMANING',
  SOMMATIE: 'SOMMATIE',
  INGEBREKESTELLING: 'INGEBREKESTELLING',
  BLOKKADE: 'BLOKKADE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  CHECK: 'CHECK',
  OTHER: 'OTHER'
};

exports.AgreementStatus = exports.$Enums.AgreementStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.IdentificationType = exports.$Enums.IdentificationType = {
  DNI: 'DNI',
  PASSPORT: 'PASSPORT',
  NIE: 'NIE',
  CIF: 'CIF',
  KVK: 'KVK',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  TenantRegistry: 'TenantRegistry',
  User: 'User',
  Parameter: 'Parameter',
  Verdict: 'Verdict',
  VerdictInterest: 'VerdictInterest',
  VerdictInterestDetails: 'VerdictInterestDetails',
  VerdictEmbargo: 'VerdictEmbargo',
  VerdictBailiffServices: 'VerdictBailiffServices',
  VerdictAttachment: 'VerdictAttachment',
  InterestType: 'InterestType',
  InterestDetail: 'InterestDetail',
  BillingInvoice: 'BillingInvoice',
  BillingInvoiceDetail: 'BillingInvoiceDetail',
  BillingPayment: 'BillingPayment',
  Plan: 'Plan',
  CollectionCase: 'CollectionCase',
  Penalty: 'Penalty',
  Notification: 'Notification',
  Payment: 'Payment',
  PaymentAgreement: 'PaymentAgreement',
  Debtor: 'Debtor',
  DebtorIncome: 'DebtorIncome'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
